<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: zip | Guimin's Blog]]></title>
  <link href="http://tech.lincank.info/blog/categories/zip/atom.xml" rel="self"/>
  <link href="http://tech.lincank.info/"/>
  <updated>2015-08-31T22:01:11+08:00</updated>
  <id>http://tech.lincank.info/</id>
  <author>
    <name><![CDATA[Guimin Lin/林桂民]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[create zip file on the fly with rubyzip]]></title>
    <link href="http://tech.lincank.info/blog/2013/04/08/create-zip-file-on-the-fly-with-rubyzip/"/>
    <updated>2013-04-08T23:13:00+08:00</updated>
    <id>http://tech.lincank.info/blog/2013/04/08/create-zip-file-on-the-fly-with-rubyzip</id>
    <content type="html"><![CDATA[<p>I tries to create zip file with multiple files in it, on the fly of course. I refered to <a href="http://info.michael-simons.eu/2008/01/21/using-rubyzip-to-create-zip-files-on-the-fly/">this post</a>, but it does not work for me. I search and try for hours, and figure out one solution.</p>

<!-- more -->


<p>Use <code>IO.binread</code> instead of <code>IO.read</code>, and it just works! Here is the sample code:</p>

<p>```ruby Zip With Rubyzip On The Fly</p>

<pre><code>require 'zip/zip'
require 'zip/zipfilesystem'

t = Tempfile.new("some-weird-temp-file-basename-#{request.remote_ip}")
# Give the path of the temp file to the zip outputstream, it won't try to open it as an archive.
Zip::ZipOutputStream.open(t.path) do |zos|
    some_file_list.each do |file|
        # Create a new entry with some arbitrary name
        zos.put_next_entry("some-funny-name.jpg")
        # Add the contents of the file, don't read the stuff linewise if its binary, instead use direct IO
        # use IO.binread instead of IO.read, and it just works!
        zos.print IO.binread(file.path)
    end
end
# End of the block  automatically closes the file.
# Send it using the right mime type, with a download window and some nice file name.
send_file t.path, :type =&gt; 'application/zip', :disposition =&gt; 'attachment', :filename =&gt; "some-brilliant-file-name.zip"
# The temp file will be deleted some time...
t.close
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
